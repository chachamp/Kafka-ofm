version: '3'
services:
  zookeeperofm1:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeperofm1
    restart: always
    networks:
      - kafka-ofm
    container_name: zookeeperofm1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 4
      ZOOKEEPER_SERVERS: zookeeperofm1:22888:23888;zookeeperofm2:32888:33888;zookeeperofm3:42888:43888
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

  zookeeperofm2:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeperofm2
    restart: always
    container_name: zookeeperofm2
    networks:
      - kafka-ofm
    ports:
      - "2182:2182"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 4
      ZOOKEEPER_SERVERS: zookeeperofm1:22888:23888;zookeeperofm2:32888:33888;zookeeperofm3:42888:43888

  zookeeperofm3:
    image: confluentinc/cp-zookeeper:5.3.0
    hostname: zookeeperofm3
    container_name: zookeeperofm3
    restart: always
    networks:
      - kafka-ofm
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    ports:
      - "2183:2183"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 4
      ZOOKEEPER_SERVERS: zookeeperofm1:22888:23888;zookeeperofm2:32888:33888;zookeeperofm3:42888:43888

  brokerofm1:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    hostname: brokerofm1
    container_name: brokerofm1
    restart: always
    networks:
      - kafka-ofm
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.17.2.210:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: brokerofm1:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeperofm1:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  brokerofm2:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    hostname: brokerofm2
    restart: always
    container_name: brokerofm2
    networks:
      - kafka-ofm
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
    ports:
      - "29093:29093"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.17.2.210:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: brokerofm2:29093
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeperofm2:2182
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  brokerofm3:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    hostname: brokerofm3
    container_name: brokerofm3
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    networks:
      - kafka-ofm
    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
    ports:
      - "29094:29094"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.17.2.210:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: brokerofm3:29094
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeperofm3:2183
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.0
    hostname: schema-registry
    restart: always
    container_name: schema-registry
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    networks:
      - kafka-ofm
    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
      - brokerofm1
      - brokerofm2
      - brokerofm3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'

  connect:
    image: confluentinc/kafka-connect-datagen:latest
    build:
      context: .
      dockerfile: Dockerfile
    hostname: connect
    restart: always
    container_name: connect
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    networks:
      - kafka-ofm
    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '10.17.2.210:29092,10.17.2.210:29093,10.17.2.210:29094'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'
      # Assumes image is based on confluentinc/kafka-connect-datagen:latest which is pulling 5.1.1 Connect image
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.3.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    command: "bash -c 'if [ ! -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-datagen ]; then echo \"WARNING: Did not find directory for kafka-connect-datagen (did you remember to run: docker-compose up -d --build ?)\"; fi ; /etc/confluent/docker/run'"

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.0
    hostname: control-center
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    container_name: control-center
    networks:
      - kafka-ofm
    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - schema-registry
      - connect
      - ksql-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: '10.17.2.210:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeperofm1:2181,zookeeperofm2:2182,zookeeperofm3:2183'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksql-server:
    image: confluentinc/cp-ksql-server:5.3.0
    hostname: ksql-server
    restart: always
    container_name: ksql-server
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    networks:
      - kafka-ofm
    depends_on:
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "10.17.2.210:29092,10.17.2.210:29093,10.17.2.210:29094"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "cp-all-in-one"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.3.0
    container_name: ksql-cli
    restart: always
    networks:
      - kafka-ofm
    depends_on:
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - connect
      - ksql-server
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    # Downrev ksql-examples to 5.1.2 due to DEVX-798 (work around issues in 5.2.0)
    image: confluentinc/ksql-examples:5.3.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    networks:
      - kafka-ofm
    depends_on:
      - ksql-server
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - schema-registry
      - connect
    networks:
      - kafka-ofm
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b 10.17.2.210:29092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: brokerofm1:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.3.0
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    depends_on:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
      - brokerofm1
      - brokerofm2
      - brokerofm3
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: '10.17.2.210:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - kafka-ofm

  managementofm:
    image: sheepkiller/kafka-manager:latest
    container_name: management-ofm
    build: ./management
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 100M

    ports:
      - "9090:9000"
    links:
      - zookeeperofm1
      - zookeeperofm2
      - zookeeperofm3
      - brokerofm1
      - brokerofm2
      - brokerofm3
    environment:
      ZK_HOSTS: zookeeperofm1:2181
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    networks:
      - kafka-ofm
      
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    networks:
      - kafka-ofm
    ports:
      - "9095:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml




#  kafka-topic-ui:
 #   image: landoop/kafka-topics-ui:latest
  #  container_name: kafka-topics-ui
   # restart: always
   # ports:
   #   - "8000:8000"
   # environment:
   #   KAFKA_REST_PROXY_URL=http://10.17.2.210:8082
   #   PROXY=true
   #   CADDY_OPTIONS=basicauth / admin Zxcv123!
   #   PORT=8000
  # networks:
  #   - kafka-ofm

networks:
    kafka-ofm:
      driver: bridge
